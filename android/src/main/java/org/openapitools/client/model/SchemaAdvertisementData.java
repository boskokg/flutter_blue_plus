/*
 * Flutter Blue Plus API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SchemaAdvertisementData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-20T01:41:46.146266-07:00[America/Los_Angeles]")
public class SchemaAdvertisementData {
  public static final String SERIALIZED_NAME_LOCAL_NAME = "local_name";
  @SerializedName(SERIALIZED_NAME_LOCAL_NAME)
  private String localName;

  public static final String SERIALIZED_NAME_TX_POWER_LEVEL = "tx_power_level";
  @SerializedName(SERIALIZED_NAME_TX_POWER_LEVEL)
  private Integer txPowerLevel;

  public static final String SERIALIZED_NAME_CONNECTABLE = "connectable";
  @SerializedName(SERIALIZED_NAME_CONNECTABLE)
  private Boolean connectable;

  public static final String SERIALIZED_NAME_MANUFACTURER_DATA = "manufacturer_data";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER_DATA)
  private Map<String, byte[]> manufacturerData = new HashMap<>();

  public static final String SERIALIZED_NAME_SERVICE_DATA = "service_data";
  @SerializedName(SERIALIZED_NAME_SERVICE_DATA)
  private Map<String, byte[]> serviceData = new HashMap<>();

  public static final String SERIALIZED_NAME_SERVICE_UUIDS = "service_uuids";
  @SerializedName(SERIALIZED_NAME_SERVICE_UUIDS)
  private List<String> serviceUuids = new ArrayList<>();

  public SchemaAdvertisementData() {
  }

  public SchemaAdvertisementData localName(String localName) {
    
    this.localName = localName;
    return this;
  }

   /**
   * Get localName
   * @return localName
  **/
  @javax.annotation.Nonnull

  public String getLocalName() {
    return localName;
  }


  public void setLocalName(String localName) {
    this.localName = localName;
  }


  public SchemaAdvertisementData txPowerLevel(Integer txPowerLevel) {
    
    this.txPowerLevel = txPowerLevel;
    return this;
  }

   /**
   * Get txPowerLevel
   * @return txPowerLevel
  **/
  @javax.annotation.Nonnull

  public Integer getTxPowerLevel() {
    return txPowerLevel;
  }


  public void setTxPowerLevel(Integer txPowerLevel) {
    this.txPowerLevel = txPowerLevel;
  }


  public SchemaAdvertisementData connectable(Boolean connectable) {
    
    this.connectable = connectable;
    return this;
  }

   /**
   * Get connectable
   * @return connectable
  **/
  @javax.annotation.Nonnull

  public Boolean getConnectable() {
    return connectable;
  }


  public void setConnectable(Boolean connectable) {
    this.connectable = connectable;
  }


  public SchemaAdvertisementData manufacturerData(Map<String, byte[]> manufacturerData) {
    
    this.manufacturerData = manufacturerData;
    return this;
  }

  public SchemaAdvertisementData putManufacturerDataItem(String key, byte[] manufacturerDataItem) {
    if (this.manufacturerData == null) {
      this.manufacturerData = new HashMap<>();
    }
    this.manufacturerData.put(key, manufacturerDataItem);
    return this;
  }

   /**
   * Get manufacturerData
   * @return manufacturerData
  **/
  @javax.annotation.Nonnull

  public Map<String, byte[]> getManufacturerData() {
    return manufacturerData;
  }


  public void setManufacturerData(Map<String, byte[]> manufacturerData) {
    this.manufacturerData = manufacturerData;
  }


  public SchemaAdvertisementData serviceData(Map<String, byte[]> serviceData) {
    
    this.serviceData = serviceData;
    return this;
  }

  public SchemaAdvertisementData putServiceDataItem(String key, byte[] serviceDataItem) {
    if (this.serviceData == null) {
      this.serviceData = new HashMap<>();
    }
    this.serviceData.put(key, serviceDataItem);
    return this;
  }

   /**
   * Get serviceData
   * @return serviceData
  **/
  @javax.annotation.Nonnull

  public Map<String, byte[]> getServiceData() {
    return serviceData;
  }


  public void setServiceData(Map<String, byte[]> serviceData) {
    this.serviceData = serviceData;
  }


  public SchemaAdvertisementData serviceUuids(List<String> serviceUuids) {
    
    this.serviceUuids = serviceUuids;
    return this;
  }

  public SchemaAdvertisementData addServiceUuidsItem(String serviceUuidsItem) {
    if (this.serviceUuids == null) {
      this.serviceUuids = new ArrayList<>();
    }
    this.serviceUuids.add(serviceUuidsItem);
    return this;
  }

   /**
   * Get serviceUuids
   * @return serviceUuids
  **/
  @javax.annotation.Nonnull

  public List<String> getServiceUuids() {
    return serviceUuids;
  }


  public void setServiceUuids(List<String> serviceUuids) {
    this.serviceUuids = serviceUuids;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaAdvertisementData schemaAdvertisementData = (SchemaAdvertisementData) o;
    return Objects.equals(this.localName, schemaAdvertisementData.localName) &&
        Objects.equals(this.txPowerLevel, schemaAdvertisementData.txPowerLevel) &&
        Objects.equals(this.connectable, schemaAdvertisementData.connectable) &&
        Objects.equals(this.manufacturerData, schemaAdvertisementData.manufacturerData) &&
        Objects.equals(this.serviceData, schemaAdvertisementData.serviceData) &&
        Objects.equals(this.serviceUuids, schemaAdvertisementData.serviceUuids);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localName, txPowerLevel, connectable, manufacturerData, serviceData, serviceUuids);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaAdvertisementData {\n");
    sb.append("    localName: ").append(toIndentedString(localName)).append("\n");
    sb.append("    txPowerLevel: ").append(toIndentedString(txPowerLevel)).append("\n");
    sb.append("    connectable: ").append(toIndentedString(connectable)).append("\n");
    sb.append("    manufacturerData: ").append(toIndentedString(manufacturerData)).append("\n");
    sb.append("    serviceData: ").append(toIndentedString(serviceData)).append("\n");
    sb.append("    serviceUuids: ").append(toIndentedString(serviceUuids)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("local_name");
    openapiFields.add("tx_power_level");
    openapiFields.add("connectable");
    openapiFields.add("manufacturer_data");
    openapiFields.add("service_data");
    openapiFields.add("service_uuids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("local_name");
    openapiRequiredFields.add("tx_power_level");
    openapiRequiredFields.add("connectable");
    openapiRequiredFields.add("manufacturer_data");
    openapiRequiredFields.add("service_data");
    openapiRequiredFields.add("service_uuids");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SchemaAdvertisementData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SchemaAdvertisementData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SchemaAdvertisementData is not found in the empty JSON string", SchemaAdvertisementData.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SchemaAdvertisementData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SchemaAdvertisementData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SchemaAdvertisementData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("local_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `local_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("local_name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("service_uuids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("service_uuids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_uuids` to be an array in the JSON string but got `%s`", jsonObj.get("service_uuids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SchemaAdvertisementData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SchemaAdvertisementData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SchemaAdvertisementData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SchemaAdvertisementData.class));

       return (TypeAdapter<T>) new TypeAdapter<SchemaAdvertisementData>() {
           @Override
           public void write(JsonWriter out, SchemaAdvertisementData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SchemaAdvertisementData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SchemaAdvertisementData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SchemaAdvertisementData
  * @throws IOException if the JSON string is invalid with respect to SchemaAdvertisementData
  */
  public static SchemaAdvertisementData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SchemaAdvertisementData.class);
  }

 /**
  * Convert an instance of SchemaAdvertisementData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

