/*
 * Flutter Blue Plus API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SchemaCharacteristicProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-20T01:41:46.146266-07:00[America/Los_Angeles]")
public class SchemaCharacteristicProperties {
  public static final String SERIALIZED_NAME_BROADCAST = "broadcast";
  @SerializedName(SERIALIZED_NAME_BROADCAST)
  private Boolean broadcast;

  public static final String SERIALIZED_NAME_READ = "read";
  @SerializedName(SERIALIZED_NAME_READ)
  private Boolean read;

  public static final String SERIALIZED_NAME_WRITE_WITHOUT_RESPONSE = "write_without_response";
  @SerializedName(SERIALIZED_NAME_WRITE_WITHOUT_RESPONSE)
  private Boolean writeWithoutResponse;

  public static final String SERIALIZED_NAME_WRITE = "write";
  @SerializedName(SERIALIZED_NAME_WRITE)
  private Boolean write;

  public static final String SERIALIZED_NAME_NOTIFY = "notify";
  @SerializedName(SERIALIZED_NAME_NOTIFY)
  private Boolean notify;

  public static final String SERIALIZED_NAME_INDICATE = "indicate";
  @SerializedName(SERIALIZED_NAME_INDICATE)
  private Boolean indicate;

  public static final String SERIALIZED_NAME_AUTHENTICATED_SIGNED_WRITES = "authenticated_signed_writes";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATED_SIGNED_WRITES)
  private Boolean authenticatedSignedWrites;

  public static final String SERIALIZED_NAME_EXTENDED_PROPERTIES = "extended_properties";
  @SerializedName(SERIALIZED_NAME_EXTENDED_PROPERTIES)
  private Boolean extendedProperties;

  public static final String SERIALIZED_NAME_NOTIFY_ENCRYPTION_REQUIRED = "notify_encryption_required";
  @SerializedName(SERIALIZED_NAME_NOTIFY_ENCRYPTION_REQUIRED)
  private Boolean notifyEncryptionRequired;

  public static final String SERIALIZED_NAME_INDICATE_ENCRYPTION_REQUIRED = "indicate_encryption_required";
  @SerializedName(SERIALIZED_NAME_INDICATE_ENCRYPTION_REQUIRED)
  private Boolean indicateEncryptionRequired;

  public SchemaCharacteristicProperties() {
  }

  public SchemaCharacteristicProperties broadcast(Boolean broadcast) {
    
    this.broadcast = broadcast;
    return this;
  }

   /**
   * Get broadcast
   * @return broadcast
  **/
  @javax.annotation.Nonnull

  public Boolean getBroadcast() {
    return broadcast;
  }


  public void setBroadcast(Boolean broadcast) {
    this.broadcast = broadcast;
  }


  public SchemaCharacteristicProperties read(Boolean read) {
    
    this.read = read;
    return this;
  }

   /**
   * Get read
   * @return read
  **/
  @javax.annotation.Nonnull

  public Boolean getRead() {
    return read;
  }


  public void setRead(Boolean read) {
    this.read = read;
  }


  public SchemaCharacteristicProperties writeWithoutResponse(Boolean writeWithoutResponse) {
    
    this.writeWithoutResponse = writeWithoutResponse;
    return this;
  }

   /**
   * Get writeWithoutResponse
   * @return writeWithoutResponse
  **/
  @javax.annotation.Nonnull

  public Boolean getWriteWithoutResponse() {
    return writeWithoutResponse;
  }


  public void setWriteWithoutResponse(Boolean writeWithoutResponse) {
    this.writeWithoutResponse = writeWithoutResponse;
  }


  public SchemaCharacteristicProperties write(Boolean write) {
    
    this.write = write;
    return this;
  }

   /**
   * Get write
   * @return write
  **/
  @javax.annotation.Nonnull

  public Boolean getWrite() {
    return write;
  }


  public void setWrite(Boolean write) {
    this.write = write;
  }


  public SchemaCharacteristicProperties notify(Boolean notify) {
    
    this.notify = notify;
    return this;
  }

   /**
   * Get notify
   * @return notify
  **/
  @javax.annotation.Nonnull

  public Boolean getNotify() {
    return notify;
  }


  public void setNotify(Boolean notify) {
    this.notify = notify;
  }


  public SchemaCharacteristicProperties indicate(Boolean indicate) {
    
    this.indicate = indicate;
    return this;
  }

   /**
   * Get indicate
   * @return indicate
  **/
  @javax.annotation.Nonnull

  public Boolean getIndicate() {
    return indicate;
  }


  public void setIndicate(Boolean indicate) {
    this.indicate = indicate;
  }


  public SchemaCharacteristicProperties authenticatedSignedWrites(Boolean authenticatedSignedWrites) {
    
    this.authenticatedSignedWrites = authenticatedSignedWrites;
    return this;
  }

   /**
   * Get authenticatedSignedWrites
   * @return authenticatedSignedWrites
  **/
  @javax.annotation.Nonnull

  public Boolean getAuthenticatedSignedWrites() {
    return authenticatedSignedWrites;
  }


  public void setAuthenticatedSignedWrites(Boolean authenticatedSignedWrites) {
    this.authenticatedSignedWrites = authenticatedSignedWrites;
  }


  public SchemaCharacteristicProperties extendedProperties(Boolean extendedProperties) {
    
    this.extendedProperties = extendedProperties;
    return this;
  }

   /**
   * Get extendedProperties
   * @return extendedProperties
  **/
  @javax.annotation.Nonnull

  public Boolean getExtendedProperties() {
    return extendedProperties;
  }


  public void setExtendedProperties(Boolean extendedProperties) {
    this.extendedProperties = extendedProperties;
  }


  public SchemaCharacteristicProperties notifyEncryptionRequired(Boolean notifyEncryptionRequired) {
    
    this.notifyEncryptionRequired = notifyEncryptionRequired;
    return this;
  }

   /**
   * Get notifyEncryptionRequired
   * @return notifyEncryptionRequired
  **/
  @javax.annotation.Nonnull

  public Boolean getNotifyEncryptionRequired() {
    return notifyEncryptionRequired;
  }


  public void setNotifyEncryptionRequired(Boolean notifyEncryptionRequired) {
    this.notifyEncryptionRequired = notifyEncryptionRequired;
  }


  public SchemaCharacteristicProperties indicateEncryptionRequired(Boolean indicateEncryptionRequired) {
    
    this.indicateEncryptionRequired = indicateEncryptionRequired;
    return this;
  }

   /**
   * Get indicateEncryptionRequired
   * @return indicateEncryptionRequired
  **/
  @javax.annotation.Nonnull

  public Boolean getIndicateEncryptionRequired() {
    return indicateEncryptionRequired;
  }


  public void setIndicateEncryptionRequired(Boolean indicateEncryptionRequired) {
    this.indicateEncryptionRequired = indicateEncryptionRequired;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaCharacteristicProperties schemaCharacteristicProperties = (SchemaCharacteristicProperties) o;
    return Objects.equals(this.broadcast, schemaCharacteristicProperties.broadcast) &&
        Objects.equals(this.read, schemaCharacteristicProperties.read) &&
        Objects.equals(this.writeWithoutResponse, schemaCharacteristicProperties.writeWithoutResponse) &&
        Objects.equals(this.write, schemaCharacteristicProperties.write) &&
        Objects.equals(this.notify, schemaCharacteristicProperties.notify) &&
        Objects.equals(this.indicate, schemaCharacteristicProperties.indicate) &&
        Objects.equals(this.authenticatedSignedWrites, schemaCharacteristicProperties.authenticatedSignedWrites) &&
        Objects.equals(this.extendedProperties, schemaCharacteristicProperties.extendedProperties) &&
        Objects.equals(this.notifyEncryptionRequired, schemaCharacteristicProperties.notifyEncryptionRequired) &&
        Objects.equals(this.indicateEncryptionRequired, schemaCharacteristicProperties.indicateEncryptionRequired);
  }

  @Override
  public int hashCode() {
    return Objects.hash(broadcast, read, writeWithoutResponse, write, notify, indicate, authenticatedSignedWrites, extendedProperties, notifyEncryptionRequired, indicateEncryptionRequired);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaCharacteristicProperties {\n");
    sb.append("    broadcast: ").append(toIndentedString(broadcast)).append("\n");
    sb.append("    read: ").append(toIndentedString(read)).append("\n");
    sb.append("    writeWithoutResponse: ").append(toIndentedString(writeWithoutResponse)).append("\n");
    sb.append("    write: ").append(toIndentedString(write)).append("\n");
    sb.append("    notify: ").append(toIndentedString(notify)).append("\n");
    sb.append("    indicate: ").append(toIndentedString(indicate)).append("\n");
    sb.append("    authenticatedSignedWrites: ").append(toIndentedString(authenticatedSignedWrites)).append("\n");
    sb.append("    extendedProperties: ").append(toIndentedString(extendedProperties)).append("\n");
    sb.append("    notifyEncryptionRequired: ").append(toIndentedString(notifyEncryptionRequired)).append("\n");
    sb.append("    indicateEncryptionRequired: ").append(toIndentedString(indicateEncryptionRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("broadcast");
    openapiFields.add("read");
    openapiFields.add("write_without_response");
    openapiFields.add("write");
    openapiFields.add("notify");
    openapiFields.add("indicate");
    openapiFields.add("authenticated_signed_writes");
    openapiFields.add("extended_properties");
    openapiFields.add("notify_encryption_required");
    openapiFields.add("indicate_encryption_required");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("broadcast");
    openapiRequiredFields.add("read");
    openapiRequiredFields.add("write_without_response");
    openapiRequiredFields.add("write");
    openapiRequiredFields.add("notify");
    openapiRequiredFields.add("indicate");
    openapiRequiredFields.add("authenticated_signed_writes");
    openapiRequiredFields.add("extended_properties");
    openapiRequiredFields.add("notify_encryption_required");
    openapiRequiredFields.add("indicate_encryption_required");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SchemaCharacteristicProperties
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SchemaCharacteristicProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SchemaCharacteristicProperties is not found in the empty JSON string", SchemaCharacteristicProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SchemaCharacteristicProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SchemaCharacteristicProperties` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SchemaCharacteristicProperties.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SchemaCharacteristicProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SchemaCharacteristicProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SchemaCharacteristicProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SchemaCharacteristicProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SchemaCharacteristicProperties>() {
           @Override
           public void write(JsonWriter out, SchemaCharacteristicProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SchemaCharacteristicProperties read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SchemaCharacteristicProperties given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SchemaCharacteristicProperties
  * @throws IOException if the JSON string is invalid with respect to SchemaCharacteristicProperties
  */
  public static SchemaCharacteristicProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SchemaCharacteristicProperties.class);
  }

 /**
  * Convert an instance of SchemaCharacteristicProperties to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

