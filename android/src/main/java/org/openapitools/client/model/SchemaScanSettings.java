/*
 * Flutter Blue Plus API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SchemaScanSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-20T01:41:46.146266-07:00[America/Los_Angeles]")
public class SchemaScanSettings {
  public static final String SERIALIZED_NAME_ANDROID_SCAN_MODE = "android_scan_mode";
  @SerializedName(SERIALIZED_NAME_ANDROID_SCAN_MODE)
  private Integer androidScanMode;

  public static final String SERIALIZED_NAME_SERVICE_UUIDS = "service_uuids";
  @SerializedName(SERIALIZED_NAME_SERVICE_UUIDS)
  private List<String> serviceUuids = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOW_DUPLICATES = "allow_duplicates";
  @SerializedName(SERIALIZED_NAME_ALLOW_DUPLICATES)
  private Boolean allowDuplicates;

  public static final String SERIALIZED_NAME_MAC_ADDRESSES = "mac_addresses";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESSES)
  private List<String> macAddresses = new ArrayList<>();

  public SchemaScanSettings() {
  }

  public SchemaScanSettings androidScanMode(Integer androidScanMode) {
    
    this.androidScanMode = androidScanMode;
    return this;
  }

   /**
   * Get androidScanMode
   * @return androidScanMode
  **/
  @javax.annotation.Nonnull

  public Integer getAndroidScanMode() {
    return androidScanMode;
  }


  public void setAndroidScanMode(Integer androidScanMode) {
    this.androidScanMode = androidScanMode;
  }


  public SchemaScanSettings serviceUuids(List<String> serviceUuids) {
    
    this.serviceUuids = serviceUuids;
    return this;
  }

  public SchemaScanSettings addServiceUuidsItem(String serviceUuidsItem) {
    if (this.serviceUuids == null) {
      this.serviceUuids = new ArrayList<>();
    }
    this.serviceUuids.add(serviceUuidsItem);
    return this;
  }

   /**
   * Get serviceUuids
   * @return serviceUuids
  **/
  @javax.annotation.Nonnull

  public List<String> getServiceUuids() {
    return serviceUuids;
  }


  public void setServiceUuids(List<String> serviceUuids) {
    this.serviceUuids = serviceUuids;
  }


  public SchemaScanSettings allowDuplicates(Boolean allowDuplicates) {
    
    this.allowDuplicates = allowDuplicates;
    return this;
  }

   /**
   * Get allowDuplicates
   * @return allowDuplicates
  **/
  @javax.annotation.Nonnull

  public Boolean getAllowDuplicates() {
    return allowDuplicates;
  }


  public void setAllowDuplicates(Boolean allowDuplicates) {
    this.allowDuplicates = allowDuplicates;
  }


  public SchemaScanSettings macAddresses(List<String> macAddresses) {
    
    this.macAddresses = macAddresses;
    return this;
  }

  public SchemaScanSettings addMacAddressesItem(String macAddressesItem) {
    if (this.macAddresses == null) {
      this.macAddresses = new ArrayList<>();
    }
    this.macAddresses.add(macAddressesItem);
    return this;
  }

   /**
   * Get macAddresses
   * @return macAddresses
  **/
  @javax.annotation.Nonnull

  public List<String> getMacAddresses() {
    return macAddresses;
  }


  public void setMacAddresses(List<String> macAddresses) {
    this.macAddresses = macAddresses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaScanSettings schemaScanSettings = (SchemaScanSettings) o;
    return Objects.equals(this.androidScanMode, schemaScanSettings.androidScanMode) &&
        Objects.equals(this.serviceUuids, schemaScanSettings.serviceUuids) &&
        Objects.equals(this.allowDuplicates, schemaScanSettings.allowDuplicates) &&
        Objects.equals(this.macAddresses, schemaScanSettings.macAddresses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(androidScanMode, serviceUuids, allowDuplicates, macAddresses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaScanSettings {\n");
    sb.append("    androidScanMode: ").append(toIndentedString(androidScanMode)).append("\n");
    sb.append("    serviceUuids: ").append(toIndentedString(serviceUuids)).append("\n");
    sb.append("    allowDuplicates: ").append(toIndentedString(allowDuplicates)).append("\n");
    sb.append("    macAddresses: ").append(toIndentedString(macAddresses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("android_scan_mode");
    openapiFields.add("service_uuids");
    openapiFields.add("allow_duplicates");
    openapiFields.add("mac_addresses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("android_scan_mode");
    openapiRequiredFields.add("service_uuids");
    openapiRequiredFields.add("allow_duplicates");
    openapiRequiredFields.add("mac_addresses");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SchemaScanSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SchemaScanSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SchemaScanSettings is not found in the empty JSON string", SchemaScanSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SchemaScanSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SchemaScanSettings` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SchemaScanSettings.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("service_uuids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("service_uuids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_uuids` to be an array in the JSON string but got `%s`", jsonObj.get("service_uuids").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("mac_addresses") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("mac_addresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac_addresses` to be an array in the JSON string but got `%s`", jsonObj.get("mac_addresses").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SchemaScanSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SchemaScanSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SchemaScanSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SchemaScanSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<SchemaScanSettings>() {
           @Override
           public void write(JsonWriter out, SchemaScanSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SchemaScanSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SchemaScanSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SchemaScanSettings
  * @throws IOException if the JSON string is invalid with respect to SchemaScanSettings
  */
  public static SchemaScanSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SchemaScanSettings.class);
  }

 /**
  * Convert an instance of SchemaScanSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

